# -*- coding: utf-8 -*-
"""Air Quality.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kzfGwyqxg-RQRh3PHTxdIESYig53hn47
"""

import pandas as pd
import numpy as np
from google.colab import files
uploaded=files.upload()



df=pd.read_csv("VSKP.csv", skiprows=1)
df.info()

df['AQI'] = df['AQI'].replace("Atleast 3 inputs*", np.nan)
df['AQI'] = pd.to_numeric(df['AQI'], errors='coerce')
df=df.dropna(subset=["AQI"])
df.info()

numeric_df = df.select_dtypes(include=['number'])

corrm=numeric_df.corr()
corrm['AQI'].sort_values(ascending=False)

new_d=df.drop(columns=['From Date','To Date'])
correlation_matrix = new_d.corr()
import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(12, 10))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap="coolwarm", cbar=True)
plt.title("Correlation Matrix")
plt.show()

features_to_keep = ['From Date','To Date','AQI', 'PM2.5 (ug/m3)', 'PM10 (ug/m3)', 'NO2 (ug/m3)',
                    'CO (mg/m3)', 'NOx (ppb)', 'Ozone (ug/m3)', 'NO (ug/m3)','Benzene (ug/m3)','BP (mmHg)','WS (m/s)']
cleaned_data=df[features_to_keep]
cleaned_data.info()

missing_values = cleaned_data.isnull().sum()


print(missing_values)

import matplotlib.pyplot as plt
cleaned_data.hist(bins=20, figsize=(15, 10))
plt.show()

from scipy.stats import skew

skewness = cleaned_data.skew(numeric_only=True)
print(skewness)

import numpy as np
from sklearn.preprocessing import PowerTransformer


cleaned_data['PM2.5 (ug/m3)'] = np.log1p(cleaned_data['PM2.5 (ug/m3)'])
cleaned_data['PM10 (ug/m3)'] = np.log1p(cleaned_data['PM10 (ug/m3)'])
pt = PowerTransformer(method='yeo-johnson')
cleaned_data['NOx (ppb)'] = pt.fit_transform(cleaned_data[['NOx (ppb)']])
cleaned_data['Ozone (ug/m3)'] = np.log1p(cleaned_data['Ozone (ug/m3)'])
cleaned_data['NO (ug/m3)'] = np.log1p(cleaned_data['NO (ug/m3)'])

cleaned_data['NO2 (ug/m3)'] = np.sqrt(cleaned_data['NO2 (ug/m3)'])
cleaned_data['Benzene (ug/m3)'] = np.sqrt(cleaned_data['Benzene (ug/m3)'])

cleaned_data['BP (mmHg)'] = np.log1p(cleaned_data['BP (mmHg)'].max() - cleaned_data['BP (mmHg)'])



transformed_skewness = cleaned_data[['PM2.5 (ug/m3)', 'PM10 (ug/m3)','NOx (ppb)',
                                     'Ozone (ug/m3)', 'NO (ug/m3)', 'NO2 (ug/m3)',
                                     'Benzene (ug/m3)','BP (mmHg)']].skew()

print("Skewness after transformations (excluding AQI):")
print(transformed_skewness)

from scipy.stats import skew

skewness = cleaned_data.skew(numeric_only=True)
print(skewness)

numeric_columns = cleaned_data.select_dtypes(include=['float64']).columns
cleaned_data = cleaned_data.fillna(cleaned_data[numeric_columns].mean())
cleaned_data.describe()

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
feat = ['PM2.5 (ug/m3)', 'PM10 (ug/m3)', 'NO2 (ug/m3)', 'CO (mg/m3)',
        'NOx (ppb)', 'Ozone (ug/m3)', 'NO (ug/m3)', 'Benzene (ug/m3)',
        'BP (mmHg)', 'WS (m/s)']

sc_data = df[feat]
cleaned_data[feat] = scaler.fit_transform(cleaned_data[feat])

cleaned_data.hist(bins=20, figsize=(15, 10))
plt.show()

cleaned_data.info()

cleaned_data.to_csv('output_file4.csv', index=False)

import matplotlib.pyplot as plt

plt.scatter(y_test, y_pred, alpha=0.5)
plt.xlabel("Actual AQI")
plt.ylabel("Predicted AQI")
plt.title("Actual vs Predicted AQI")
plt.show()

import matplotlib.pyplot as plt
cleaned_data.hist(bins=20, figsize=(15, 10))
plt.show()